
package com.bjoru.cryptosis
package ethabi
package types
package generated

[1..22#final case class TupleType1[[#T1 <: SolType#]]([#_1: T1#]) extends TupleType:
  override def toSeq: Seq[SolType] = Seq([#_1#])
  override def toString = toSeq.mkString("[", ", ", "]")
#
]

[1..22#object TupleType1:

  given [[#T1 <: SolType]#](using [#typeInfo1: TypeInfo[T1]#]): TypeInfo[TupleType1[[#T1#]]] with
    extension (t: TupleType1[[#T1#]])
      def name = "tuple"
      def isStatic = [#typeInfo1.isStatic# && ]
      def encode[U >: TupleType1[[#T1#]]](value: U) =
        val original = value.asInstanceOf[TupleType1[[#T1#]]]
        val typeInfos = List([#typeInfo1#])
        val encodedValues = List([#typeInfo1.encode(original._1)#])
        TupleType.encode(typeInfos, encodedValues)
      def decode(bytes: Array[Byte], position: Int) =
        val typeInfos = List([#typeInfo1#])
        val (results, consumed) = TupleType.decode(bytes, position, typeInfos)
        (TupleType1[[#T1#]]([#results(0).asInstanceOf[T1]#]), consumed)

  // create from list
  def from[[#T1 <: SolType#]](values: Seq[SolType]): TupleType1[[#T1#]] = TupleType1([#values(0).asInstanceOf[T1]#])
#
]

